//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Shader"",
            ""id"": ""dba3dbdf-edc0-4e47-a54a-fbdc9d6cfb9a"",
            ""actions"": [
                {
                    ""name"": ""AfterImage"",
                    ""type"": ""Button"",
                    ""id"": ""15996dbe-664b-4a56-aae6-095186d844f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28d19319-b0a7-4ae1-824e-b61063997e52"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AfterImage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shader
        m_Shader = asset.FindActionMap("Shader", throwIfNotFound: true);
        m_Shader_AfterImage = m_Shader.FindAction("AfterImage", throwIfNotFound: true);
    }

    ~@Input()
    {
        UnityEngine.Debug.Assert(!m_Shader.enabled, "This will cause a leak and performance issues, Input.Shader.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shader
    private readonly InputActionMap m_Shader;
    private List<IShaderActions> m_ShaderActionsCallbackInterfaces = new List<IShaderActions>();
    private readonly InputAction m_Shader_AfterImage;
    public struct ShaderActions
    {
        private @Input m_Wrapper;
        public ShaderActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @AfterImage => m_Wrapper.m_Shader_AfterImage;
        public InputActionMap Get() { return m_Wrapper.m_Shader; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShaderActions set) { return set.Get(); }
        public void AddCallbacks(IShaderActions instance)
        {
            if (instance == null || m_Wrapper.m_ShaderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShaderActionsCallbackInterfaces.Add(instance);
            @AfterImage.started += instance.OnAfterImage;
            @AfterImage.performed += instance.OnAfterImage;
            @AfterImage.canceled += instance.OnAfterImage;
        }

        private void UnregisterCallbacks(IShaderActions instance)
        {
            @AfterImage.started -= instance.OnAfterImage;
            @AfterImage.performed -= instance.OnAfterImage;
            @AfterImage.canceled -= instance.OnAfterImage;
        }

        public void RemoveCallbacks(IShaderActions instance)
        {
            if (m_Wrapper.m_ShaderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShaderActions instance)
        {
            foreach (var item in m_Wrapper.m_ShaderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShaderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShaderActions @Shader => new ShaderActions(this);
    public interface IShaderActions
    {
        void OnAfterImage(InputAction.CallbackContext context);
    }
}
